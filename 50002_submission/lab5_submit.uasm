.include beta.uasm
.include lab5checkoff.uasm

count_bull_cows: | your subroutine must have this name
	| standard subroutine entry sequence
	PUSH(LP)	
	PUSH(BP)	
	MOVE(SP,BP)	

	| PUSH all used registers
	PUSH(R1) | cows
	PUSH(R2) | bulls
	PUSH(R3) | k (test word index)
	PUSH(R4) | sb, i* (scret word index)
	PUSH(R5) | bd - current digit of b
	PUSH(R6) | b_counted, is_cow*
	PUSH(R7) | is_bull
	PUSH(R8) | sa, not_bull*
	PUSH(R9) | ad
	PUSH(R10) | eq
	PUSH(R11) | a
	PUSH(R12) | b
	PUSH(R13) | digit_is_bull
	PUSH(R14) | digit_is_cow
	PUSH(R15) | mask_a = 0xF
	PUSH(R16) | n_shifted
	PUSH(R17) | shifted
	PUSH(R18) | sa2
	PUSH(R19) | ad2
	PUSH(R20) | not_future_bull
	PUSH(R21) | mask_b
	| PUSH END

	LD(BP,-12, R11)		| load the arg value of constant a to R11
	LD(BP,-16, R12)		| load the arg value of constant b to R12
	
	|.breakpoint
	|||||||||||||||||||||||||||||||||||||||||||||||
	|||| … your code here, leave score (return value) in R0 …
	|||||||||||||||||||||||||||||||||||||||||||||||

	| R11 -> a
	| R12 -> b

	CMOVE(0, R1) | cows = R1
	CMOVE(0, R2) | bulls = R2
	CMOVE(16, R3) | k[R3] [test word index] = 16

| for k[R3] in range(12, -1, -4):
loop_test_word:
	SUBC(R3, 4, R3) | k[R3] -= 4
	SHR(R11, R3, R4) | sa[R4] = a[R11] >> k
	ANDC(R4, 0xF, R5) | ad[R5] = sa & 0xF
	CMPEQC(R5, 0xF, R6) | a_counted[R6] = ad == 0xF
	BNE(R6, loop_test_word, R31) | if a_counted[R6] != 0: continue
	| i.e. if a_counted[R6]: continue

	CMOVE(0, R6) | R6 -> is_cow
	CMOVE(0, R7) | R7 -> is_bull
	CMOVE(16, R4) | i [R4] [secret word index] = 16 
	CMOVE(16, R21) | last_cow_index = 16

	| for i in range(12, -1, -4):
	loop_secret_word:
		SUBC(R4, 4, R4) | i[R4] -= 4
		SHR(R12, R4, R8) | sb[R8] = b[R12] >> i[R4]
		ANDC(R8, 0xF, R9) | bd[R9] = sb[R8] & 0xF
		CMPEQ(R5, R9, R10) | eq[R10] = bd[R5] == ad[R9]

		||||||||||||||||||||||||||||||||||||||||||||||||
		| bugfix patch #2 (a=2222, b=1234)
		| if the digit is a bull somewhere further
		| down the line we set it as NEVER a cow
	    | here first
		||||||||||||||||||||||||||||||||||||||||||||||||
		SHR(R11, R4, R18) | sa2[R18] = a[R11] >> i[R4]
		ANDC(R18, 0xF, R19) | ad2[R19] = ad2[R19] & 0xF
		CMPEQ(R19, R9, R20) | not_future_bull[R20] = bd[R9] == ad2[R19]
		SUB(R31, R20, R20) |  not_future_bull[R20] = 0 - not_future_bull[R20]
		ADDC(R20, 1, R20) | not_future_bull[R20] += 1
		| not_future_bull[R20] =  1 - (bd[R9] == ad2[R19])
		| not_future_bull[R20] =  bd[R9] != ad2[R19]
		||||||||||||||||||||||||||||||||||||||||||||||||

		CMPEQ(R3, R4, R16) | n_shifted[R16] = k[R3] == i[R4]
		SUB(R31, R16, R17) | shifted[R17] = 0[R31] - n_shifted[R16]
		ADDC(R17, 1, R17) | shifted[R17] = shifted[R17] + 1
		| -> shifted[R17] = -n_shifted[R16] + 1
		MUL(R16, R10, R13) | digit_is_bull[R13] = n_shifted[R16] * eq[R10]
		MUL(R17, R10, R14) | digit_is_cow[R14] = shifted[R17] * eq[R10]
		MUL(R14, R20, R14) | digit_is_cow[R14] *= not_future_bull[R20]
		OR(R7, R13, R7) | is_bull[R7] = digit_is_bull[R13] | is_bull[R7]
		OR(R6, R14, R6) | is_cow[R6] = digit_is_cow[R14] | is_cow[R6]
		
		||||||||||||||||||||||||||||||||||||||||
		| # patch 3
		| if digit_is_cow:
		| 	last_cow_index = i
		||||||||||||||||||||||||||||||||||||||||
		| if digit_is_cow[R14] == 0: 
		| if not digit is cow: dont run if condition
		BEQ(R14, endif_digit_is_cow)
		if_digit_is_cow:
			ADDC(R4, 0, R21) | last_cow_index[R21] = i[R4] + 0
		endif_digit_is_cow:
		|||||||||||||||||||||||||||||||||||||||||

		| if digit_is_bull == 0: continue
		BEQ(R13, continue_inner_loop, R31) | if not digit_is_bull: continue
		
		| this part masks the test word's digit if its a bull
		||||||||||||||||||||||||||||||||||||||||||||||||
		CMOVE(0xF, R15) | mask_b[R15] = 0xF
		SHL(R15, R4, R15) | mask_b[R15] = mask_b[R15] << i[R4]
		OR(R12, R15, R12) | b[R12] = b[R12] | mask_b[R15]
		||||||||||||||||||||||||||||||||||||||||
		| # patch 4
		| if digit is a bull set last_cow_index to 16
		ADDC(R31, 16, R21) | last_cow_index = 16
		| if digit is a bull we shouldn't check any further
		BR(inner_loop_end) | break
	
		continue_inner_loop:
		|.breakpoint
		BNE(R4, loop_secret_word, R31)
		| continue inner loop if i[R4] != 0

	inner_loop_end:

	CMOVE(0xF, R15) | mask_b[R15] = 0xF
	SHL(R15, R21, R15) | mask_b[R15] = mask_b[R15] << last_cow_index[R21]
	OR(R12, R15, R12) | b[R12] = b[R12] | mask_b[15]

	| free sa[R8]
	SUB(R31, R7, R8) | not_bull[R8] = 0 - is_bull[R7]
	ADDC(R8, 1, R8) | not_bull[R8] = not_bull[R8] + 1
	| not_bull[R8] = -is_bull[R7] + 1
	MUL(R6, R8, R6) | is_cow[R6] = is_cow[R6] * not_bull[R8]
	ADD(R1, R6, R1) | cows[R1] = cows[R1] + is_cow[R6]
	ADD(R2, R7, R2) | bulls[R2] = bulls[R2] + is_bull[R7]

	|.breakpoint
	BNE(R3, loop_test_word, R31)
	| continue outer loop if k[R3] != 0
	|||||||||||||||||||||||||||||||||||||||||||||||
	| OUTER LOOP END
	|||||||||||||||||||||||||||||||||||||||||||||||

	| free not_bull[R8], ad[R9]
	SHLC(R2, 4, R8) | bull_shift[R8] = bulls[R2] << 4
	ADD(R8, R1, R0) | total[R0] = bull_shift[R8] + cows[R1]
	|.breakpoint

	| … POP saved registers above in reverse order…
	POP(R21)
	POP(R20)
	POP(R19)
	POP(R18)
	POP(R17)
	POP(R16)
	POP(R15)
	POP(R14)
	POP(R13)
	POP(R12)
	POP(R11)
	POP(R10)
	POP(R9)
	POP(R8)
	POP(R7)
	POP(R6)
	POP(R5)
	POP(R4)
	POP(R3)
	POP(R2)
	POP(R1)

	| restore stack location pointers
	MOVE(BP,SP)
	POP(BP)
	POP(LP)
	RTN()
	

StackBase: 
	LONG(.+4)		| Pointer to the bottom of stack
	.=.+0x1000		| Reserve space for stack